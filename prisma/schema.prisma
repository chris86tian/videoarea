// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          String    @default("user") // "user" or "admin"
  accounts      Account[]
  sessions      Session[]
  courses       UserCourse[]
  progress      UserVideoProgress[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Course {
  id          String    @id @default(cuid())
  title       String
  description String?
  imageUrl    String?
  chapters    Chapter[]
  userCourses UserCourse[]
}

model Chapter {
  id          String  @id @default(cuid())
  title       String
  description String?
  courseId    String
  course      Course  @relation(fields: [courseId], references: [id], onDelete: Cascade)
  videos      Video[]

  @@index([courseId])
}

model Video {
  id          String  @id @default(cuid())
  title       String
  videoUrl    String // YouTube, Vimeo, S3 URL
  chapterId   String
  chapter     Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)
  order       Int     @default(0)
  userProgress UserVideoProgress[]

  @@index([chapterId])
}

model UserCourse {
  id        String   @id @default(cuid())
  userId    String
  courseId  String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@unique([userId, courseId])
  @@index([userId])
  @@index([courseId])
}

model UserVideoProgress {
  id        String   @id @default(cuid())
  userId    String
  videoId   String
  completed Boolean  @default(false)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  video     Video    @relation(fields: [videoId], references: [id], onDelete: Cascade)
  updatedAt DateTime @default(now()) @updatedAt

  @@unique([userId, videoId])
  @@index([userId])
  @@index([videoId])
}
